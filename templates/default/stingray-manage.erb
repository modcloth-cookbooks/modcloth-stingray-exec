#!<%= node['stingray_exec']['ruby_interpreter'] %>

require 'fileutils'
require 'stingray/exec/dsl'

class StingrayManager
  include Stingray::Exec::DSL

  attr_reader :action, :pool_name, :node_name

  def initialize(args = ARGV.freeze)
    if args.count > 0 && %w(-h --help).include?(args[0])
      usage
      exit 0
    elsif args.count < 3
      $stderr.puts "Not enough args. Requires 3, got #{args.count}"
      usage
      exit 2
    else
      @action, @pool_name, @node_name = args
    end
  end

  def run
    if valid_actions.include?(action)
      send(action.to_sym)
    else
      $stderr.puts "Invalid action: #{action}"
      usage
      exit 3
    end
  end

  def usage
    $stderr.puts <<-EOB
      Usage: stingray-exec <action> <pool> <node>

      Valid actions: #{valid_actions.join(', ')}
    EOB
  end

  def valid_actions
    %w(add_to_pool add_and_drain drain undrain disable enable)
  end

  def active_nodes
    all_nodes = [*pool.get_nodes(pool_name)[:nodes][:item][:item]]
    all_nodes -= disabled_nodes
    all_nodes -= draining_nodes
  end

  def disabled_nodes
    disabled = pool.get_disabled_nodes(pool_name)[:disabled_nodes][:item]
    if disabled.has_key?(:item)
      [*disabled[:item]]
    else
      []
    end
  end

  def draining_nodes
    draining = pool.get_draining_nodes(pool_name)[:values][:item]
    if draining.has_key?(:item)
      [*draining[:item]]
    else
      []
    end
  end

  def node_is_draining?
    draining_nodes.include?(node_name)
  end

  def node_is_disabled?
    disabled_nodes.include?(node_name)
  end

  def add_to_pool
    pool.add_nodes(pool_name => [node_name])
  end

  def add_and_drain
    pool.add_nodes(pool_name => [node_name])

    if node_should_fail_to_transition?
      $stderr.puts "Refusing to drain #{node_name}, it is the only active node in the #{pool_name} pool."
      FileUtils.touch(ENV['STINGRAY_FAILURE_FILE']) if ENV['STINGRAY_FAILURE_FILE']
    else
      pool.set_draining_nodes(pool_name => [node_name]) unless node_is_disabled?
    end
  end

  def node_should_fail_to_transition?
    if node_is_disabled? || node_is_draining? || (active_nodes - [node_name]).empty?
      true
    else
      false
    end
  end

  def drain
    if node_should_fail_to_transition?
      $stderr.puts "Refusing to drain #{node_name}, it is the only active node in the #{pool_name} pool."
      FileUtils.touch(ENV['STINGRAY_FAILURE_FILE']) if ENV['STINGRAY_FAILURE_FILE']
    else
      pool.set_draining_nodes(pool_name => [node_name]) unless node_is_disabled?
    end
  end

  def undrain
    pool.remove_draining_nodes(pool_name => [node_name]) if node_is_draining?
  end

  def disable
    if node_should_fail_to_transition?
      $stderr.puts "Refusing to disable node #{node_name}, it is the only active node in the #{pool_name} pool."
      FileUtils.touch(ENV['STINGRAY_FAILURE_FILE']) if ENV['STINGRAY_FAILURE_FILE']
    elsif active_nodes.include?(node_name)
      pool.disable_nodes(pool_name => [node_name])
    end
  end

  def enable
    pool.enable_nodes(pool_name => [node_name]) if node_is_disabled?
  end
end

if $0 == __FILE__
  StingrayManager.new(ARGV).run
end
